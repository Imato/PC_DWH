/*
Deployment script for pc_dwh

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "pc_dwh"
:setvar DefaultFilePrefix "pc_dwh"
:setvar DefaultDataPath "C:\Data\SQL\Data\"
:setvar DefaultLogPath "C:\Data\SQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/*
use master 
go

drop database [pc_dwh]
go

CREATE DATABASE [pc_dwh]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'pc_dwh', FILENAME = N'$(DataPath)\pc_dwh.mdf' , SIZE = 15360KB , FILEGROWTH = 10%)
 LOG ON 
( NAME = N'pc_dwh_log', FILENAME = N'$(LogPath)\pc_dwh_log.ldf' , SIZE = 15360KB , FILEGROWTH = 10%)
GO
ALTER DATABASE [pc_dwh] SET COMPATIBILITY_LEVEL = 120
GO
ALTER DATABASE [pc_dwh] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [pc_dwh] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [pc_dwh] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [pc_dwh] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [pc_dwh] SET ARITHABORT OFF 
GO
ALTER DATABASE [pc_dwh] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [pc_dwh] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [pc_dwh] SET AUTO_CREATE_STATISTICS ON
GO
ALTER DATABASE [pc_dwh] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [pc_dwh] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [pc_dwh] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [pc_dwh] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [pc_dwh] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [pc_dwh] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [pc_dwh] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [pc_dwh] SET  DISABLE_BROKER 
GO
ALTER DATABASE [pc_dwh] SET AUTO_UPDATE_STATISTICS_ASYNC ON 
GO
ALTER DATABASE [pc_dwh] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [pc_dwh] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [pc_dwh] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [pc_dwh] SET  READ_WRITE 
GO
ALTER DATABASE [pc_dwh] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [pc_dwh] SET  MULTI_USER 
GO
ALTER DATABASE [pc_dwh] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [pc_dwh] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [pc_dwh] SET DELAYED_DURABILITY = DISABLED 
GO
USE [pc_dwh]
GO
IF NOT EXISTS (SELECT name FROM sys.filegroups WHERE is_default=1 AND name = N'PRIMARY') ALTER DATABASE [pc_dwh] MODIFY FILEGROUP [PRIMARY] DEFAULT
GO
*/
GO

GO
PRINT N'Creating [dbo].[dim_calendar]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[dim_calendar] (
    [day_id]     DATE         NOT NULL,
    [day_name]   VARCHAR (10) NOT NULL,
    [month_key]  INT          NOT NULL,
    [month_name] VARCHAR (10) NOT NULL,
    [year_key]   SMALLINT     NOT NULL,
    [year_name]  VARCHAR (10) NOT NULL,
    PRIMARY KEY CLUSTERED ([day_id] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[fact_manufacture_calendar]...';


GO
ALTER TABLE [dbo].[fact_manufacture] WITH NOCHECK
    ADD CONSTRAINT [fact_manufacture_calendar] FOREIGN KEY ([day_id]) REFERENCES [dbo].[dim_calendar] ([day_id]);


GO
PRINT N'Creating [dbo].[fact_purchase_calendar]...';


GO
ALTER TABLE [dbo].[fact_purchase] WITH NOCHECK
    ADD CONSTRAINT [fact_purchase_calendar] FOREIGN KEY ([day_id]) REFERENCES [dbo].[dim_calendar] ([day_id]);


GO
PRINT N'Creating [dbo].[fact_return_calendar]...';


GO
ALTER TABLE [dbo].[fact_return] WITH NOCHECK
    ADD CONSTRAINT [fact_return_calendar] FOREIGN KEY ([day_id]) REFERENCES [dbo].[dim_calendar] ([day_id]);


GO
PRINT N'Creating [dbo].[fact_sales_calendar]...';


GO
ALTER TABLE [dbo].[fact_sales] WITH NOCHECK
    ADD CONSTRAINT [fact_sales_calendar] FOREIGN KEY ([day_id]) REFERENCES [dbo].[dim_calendar] ([day_id]);


GO
PRINT N'Creating [rs].[dim_customer]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
create view [rs].[dim_customer]
as
select customer_id, customer_name, customer_phone
from [dbo].[dim_customer]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [rs].[dim_model]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
create view [rs].[dim_model]
as
select model_id, model_name, model_barcode, create_date
from [dbo].[dim_model]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [rs].[dim_supplier]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
create view [rs].[dim_supplier]
as
select supplier_id, supplier_name, country_name, region_name
from [dbo].[dim_supplier]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [rs].[fact_purchase]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
create view [rs].[fact_purchase]
as
select day_id, purchase_id, hardware_id, supplier_id, cost
from [dbo].[fact_purchase]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [rs].[prc_r_001]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER proc rs.prc_r_001
@day_from date,
@day_to date 

as
set nocount on 
---  exec rs.prc_r_001 '20150101', '20150425'

--- продажи
create table #sales
(serial_id int not null primary key,
start_date date not null,
end_date date not null,
cost money not null,
gross_sales money not null, 
margin numeric(12, 8) not null)

--- маржинальность товара нужна чтобы вычислить маржинальность коплектующих и прибыль
insert into #sales(serial_id, start_date, cost, gross_sales, margin)
select serial_id, day_id as start_date, cost, gross_sales,
	margin = iif(gross_sales<>0, 1 - cost/gross_sales, 0)
from [rs].[fact_sales] 
where day_id between @day_from and @day_to

--- если был возврат, то получаем убыток и ставим день окончания службы товара
update s
set s.end_date = isnull(r.day_id, @day_to), 
	s.gross_sales = iif(r.[serial_id] is null, s.gross_sales, -1 * s.cost)
from #sales s
left join [rs].[fact_return] r on s.[serial_id]=r.[serial_id]
where r.[day_id] between @day_from and @day_to

--- использование комплектующих в днях и прибыль
create table #hw_usage 
(hardware_id int not null,
life_time int,
cost money not null,
gross_sales money not null
)

create clustered index cix_hw_usage on #hw_usage (hardware_id)

insert into #hw_usage
select m.hardware_id, datediff(dd, s.start_date, s.end_date), 
	m.cost, m.cost * (1 + s.margin) as gross_sales
from [rs].[fact_manufacture] m
join #sales s on m.serial_id=s.serial_id
order by m.hardware_id

--- использование комплектующих по группам и поставщикам в днях и прибыль
select h.hardware_type_name, h.supplier_name,
	avg(u.life_time) as life_time,
	sum(u.gross_sales - u.cost) as profit
from #hw_usage u
join [rs].[dim_hardware] h on h.hardware_id=u.hardware_id
group by h.hardware_type_name, h.supplier_name
order by h.hardware_type_name, h.supplier_name
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
BACKUP DATABASE [pc_dwh] TO  DISK = N'C:\Data\SQL\Projects\PC_DWH\DB\pc_dwh.bak' WITH NOFORMAT, INIT,  NAME = N'pc_dwh-Full Database Backup', SKIP, NOREWIND, NOUNLOAD,  STATS = 10
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[fact_manufacture] WITH CHECK CHECK CONSTRAINT [fact_manufacture_calendar];

ALTER TABLE [dbo].[fact_purchase] WITH CHECK CHECK CONSTRAINT [fact_purchase_calendar];

ALTER TABLE [dbo].[fact_return] WITH CHECK CHECK CONSTRAINT [fact_return_calendar];

ALTER TABLE [dbo].[fact_sales] WITH CHECK CHECK CONSTRAINT [fact_sales_calendar];


GO
PRINT N'Update complete.';


GO
