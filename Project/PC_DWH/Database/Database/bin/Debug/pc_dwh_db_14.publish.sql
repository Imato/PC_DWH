/*
Deployment script for pc_dwh

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "pc_dwh"
:setvar DefaultFilePrefix "pc_dwh"
:setvar DefaultDataPath "C:\Data\SQL\Data\"
:setvar DefaultLogPath "C:\Data\SQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/*
use master 
go

drop database [pc_dwh]
go

CREATE DATABASE [pc_dwh]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'pc_dwh', FILENAME = N'$(DataPath)\pc_dwh.mdf' , SIZE = 15360KB , FILEGROWTH = 10%)
 LOG ON 
( NAME = N'pc_dwh_log', FILENAME = N'$(LogPath)\pc_dwh_log.ldf' , SIZE = 15360KB , FILEGROWTH = 10%)
GO
ALTER DATABASE [pc_dwh] SET COMPATIBILITY_LEVEL = 120
GO
ALTER DATABASE [pc_dwh] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [pc_dwh] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [pc_dwh] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [pc_dwh] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [pc_dwh] SET ARITHABORT OFF 
GO
ALTER DATABASE [pc_dwh] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [pc_dwh] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [pc_dwh] SET AUTO_CREATE_STATISTICS ON
GO
ALTER DATABASE [pc_dwh] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [pc_dwh] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [pc_dwh] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [pc_dwh] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [pc_dwh] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [pc_dwh] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [pc_dwh] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [pc_dwh] SET  DISABLE_BROKER 
GO
ALTER DATABASE [pc_dwh] SET AUTO_UPDATE_STATISTICS_ASYNC ON 
GO
ALTER DATABASE [pc_dwh] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [pc_dwh] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [pc_dwh] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [pc_dwh] SET  READ_WRITE 
GO
ALTER DATABASE [pc_dwh] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [pc_dwh] SET  MULTI_USER 
GO
ALTER DATABASE [pc_dwh] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [pc_dwh] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [pc_dwh] SET DELAYED_DURABILITY = DISABLED 
GO
USE [pc_dwh]
GO
IF NOT EXISTS (SELECT name FROM sys.filegroups WHERE is_default=1 AND name = N'PRIMARY') ALTER DATABASE [pc_dwh] MODIFY FILEGROUP [PRIMARY] DEFAULT
GO
*/
GO

GO
PRINT N'Dropping [pf_id]...';


GO
DROP PARTITION FUNCTION [pf_id];


GO
PRINT N'Creating [pf_id]...';


GO
CREATE PARTITION FUNCTION [pf_id](INT)
    AS RANGE
    FOR VALUES (100000, 200000, 300000, 400000);


GO
PRINT N'Creating [ps_id]...';


GO
CREATE PARTITION SCHEME [ps_id]
    AS PARTITION [pf_id]
    TO ([fact_id_100000], [fact_id_200000], [fact_id_300000], [fact_id_400000], [fact_id_500000]);


GO
PRINT N'Starting rebuilding table [dbo].[fact_manufacture]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_fact_manufacture] (
    [serial_id]   INT      NOT NULL,
    [day_id]      DATE     NOT NULL,
    [model_id]    SMALLINT NOT NULL,
    [purchase_id] INT      NOT NULL,
    [hardware_id] INT      NOT NULL,
    [supplier_id] SMALLINT NOT NULL,
    [cost]        MONEY    NOT NULL,
    PRIMARY KEY CLUSTERED ([serial_id] ASC)
) ON [ps_id] ([serial_id]);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[fact_manufacture])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_fact_manufacture] ([serial_id], [day_id], [model_id], [purchase_id], [hardware_id], [supplier_id], [cost])
        SELECT   [serial_id],
                 [day_id],
                 [model_id],
                 [purchase_id],
                 [hardware_id],
                 [supplier_id],
                 [cost]
        FROM     [dbo].[fact_manufacture]
        ORDER BY [serial_id] ASC;
    END

DROP TABLE [dbo].[fact_manufacture];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_fact_manufacture]', N'fact_manufacture';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[fact_manufacture_hardware]...';


GO
ALTER TABLE [dbo].[fact_manufacture] WITH NOCHECK
    ADD CONSTRAINT [fact_manufacture_hardware] FOREIGN KEY ([hardware_id]) REFERENCES [dbo].[dim_hardware] ([hardware_id]);


GO
PRINT N'Creating [dbo].[fact_manufacture_supplier]...';


GO
ALTER TABLE [dbo].[fact_manufacture] WITH NOCHECK
    ADD CONSTRAINT [fact_manufacture_supplier] FOREIGN KEY ([supplier_id]) REFERENCES [dbo].[dim_supplier] ([supplier_id]);


GO
PRINT N'Creating [dbo].[fk_fact_manufacture_model]...';


GO
ALTER TABLE [dbo].[fact_manufacture] WITH NOCHECK
    ADD CONSTRAINT [fk_fact_manufacture_model] FOREIGN KEY ([model_id]) REFERENCES [dbo].[dim_model] ([model_id]);


GO
PRINT N'Creating [dbo].[fact_manufacture_purchase]...';


GO
ALTER TABLE [dbo].[fact_manufacture] WITH NOCHECK
    ADD CONSTRAINT [fact_manufacture_purchase] FOREIGN KEY ([purchase_id]) REFERENCES [dbo].[dim_purchase] ([purchase_id]);


GO
PRINT N'Creating [dbo].[fact_return_serial]...';


GO
ALTER TABLE [dbo].[fact_return] WITH NOCHECK
    ADD CONSTRAINT [fact_return_serial] FOREIGN KEY ([serial_id]) REFERENCES [dbo].[fact_manufacture] ([serial_id]);


GO
PRINT N'Creating [dbo].[fact_sales_manufacture]...';


GO
ALTER TABLE [dbo].[fact_sales] WITH NOCHECK
    ADD CONSTRAINT [fact_sales_manufacture] FOREIGN KEY ([serial_id]) REFERENCES [dbo].[fact_manufacture] ([serial_id]);


GO
PRINT N'Creating [dbo].[fact_manufacture_cost]...';


GO
ALTER TABLE [dbo].[fact_manufacture] WITH NOCHECK
    ADD CONSTRAINT [fact_manufacture_cost] CHECK (cost >= 0);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[fact_manufacture] WITH CHECK CHECK CONSTRAINT [fact_manufacture_hardware];

ALTER TABLE [dbo].[fact_manufacture] WITH CHECK CHECK CONSTRAINT [fact_manufacture_supplier];

ALTER TABLE [dbo].[fact_manufacture] WITH CHECK CHECK CONSTRAINT [fk_fact_manufacture_model];

ALTER TABLE [dbo].[fact_manufacture] WITH CHECK CHECK CONSTRAINT [fact_manufacture_purchase];

ALTER TABLE [dbo].[fact_return] WITH CHECK CHECK CONSTRAINT [fact_return_serial];

ALTER TABLE [dbo].[fact_sales] WITH CHECK CHECK CONSTRAINT [fact_sales_manufacture];

ALTER TABLE [dbo].[fact_manufacture] WITH CHECK CHECK CONSTRAINT [fact_manufacture_cost];


GO
PRINT N'Update complete.';


GO
